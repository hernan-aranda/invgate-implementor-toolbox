{
	"info": {
		"_postman_id": "6a32e18d-d1fd-4b67-8c11-866edb662ab0",
		"name": "[IS] Bulk update user location by email",
		"description": "This collection will update the user locations by it's email from a .csv\n\nAuthor: Hern√°n Aranda (a.k.a. Hernium)\n\n# Prerequisites\n\nCheck this article to prepare everything you need: [https://github.com/hernan-aranda/invgate-implementor-toolbox#how-to-use-this-resources](https://github.com/hernan-aranda/invgate-implementor-toolbox#how-to-use-this-resources)\n\n# Template\n\n| **Column** | **Description** |\n| --- | --- |\n| userEmail | Required. Email of the user that will be updated. |\n| locationId | Required. ID of the location where the user will be included. |\n\nSource: [https://docs.google.com/spreadsheets/d/10cN2GcwdoPv8x8-5K6YKi1zdxbbaGsW_IWTTL9CuGnY/view#gid=919297639](https://docs.google.com/spreadsheets/d/10cN2GcwdoPv8x8-5K6YKi1zdxbbaGsW_IWTTL9CuGnY/view#gid=919297639)\n\n# Execution\n\n1. Set and select the enviroment, or replace the enviroment variables with your constants\n2. Create the .csv file. Make sure that your rows are ordered by depth\n3. Run the collection using the .csv file\n    \n\n# Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get user id by email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f67c8b10-f1bb-4064-968e-f384624e5e1b",
						"exec": [
							"const responseJson = pm.response.json(); // Retrieve response\r",
							"\r",
							"if( pm.iterationData.get(\"userEmail\") === '' || responseJson.data.length === undefined || responseJson.data.length === 0 ) {\r",
							"    pm.collectionVariables.set(\"recovered_userId\", \"\");\r",
							"    postman.setNextRequest(null);\r",
							"} else {\r",
							"    pm.collectionVariables.set(\"recovered_userId\", responseJson.data[0].id );\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8d7d4bfc-23b8-4285-893f-e64d3f842eaa",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "05d360fd-0534-4d34-8304-9898e70fd668",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.api+json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{IS Protocol}}://{{IS Instance}}/public-api/people/?email={{userEmail}}",
					"protocol": "{{IS Protocol}}",
					"host": [
						"{{IS Instance}}"
					],
					"path": [
						"public-api",
						"people",
						""
					],
					"query": [
						{
							"key": "email",
							"value": "{{userEmail}}",
							"description": "Variable. You get this value from de .csv"
						}
					]
				},
				"description": "Retrieves the id of a user by it's email.\n\nEndpoint doc.: [https://webdemo.is.cloud.invgate.net/public-api/swagger/#/people/people_list](https://webdemo.is.cloud.invgate.net/public-api/swagger/#/people/people_list)"
			},
			"response": []
		},
		{
			"name": "Update user location",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f67c8b10-f1bb-4064-968e-f384624e5e1b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "652d4460-fe9b-4964-aa50-5afc51b152ec",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/vnd.api+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"data\": {\r\n        \"type\": \"Person\",\r\n        \"id\": \"{{recovered_userId}}\",\r\n        \"relationships\": {\r\n            \"location\": {\r\n                \"data\": {\r\n                    \"type\": \"Location\",\r\n                    \"id\": \"{{locationId}}\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {}
					}
				},
				"url": "{{IS Protocol}}://{{IS Instance}}/public-api/people/{{recovered_userId}}/",
				"description": "Makes the user a member of this location.\n\nEndpoint doc.: [https://webdemo.is.cloud.invgate.net/public-api/swagger/#/people/people_partial_update](https://webdemo.is.cloud.invgate.net/public-api/swagger/#/people/people_partial_update)"
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": {
			"scope": "",
			"clientSecret": "{{IS API Secret}}",
			"clientId": "{{IS API Client}}",
			"accessTokenUrl": "{{IS Protocol}}://{{IS Instance}}/{{IS API Token}}/",
			"tokenName": "{{IS Instance}}_{{$isoTimestamp}}",
			"challengeAlgorithm": "S256",
			"grant_type": "client_credentials",
			"addTokenTo": "queryParams",
			"client_authentication": "body"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6fe1776e-2f53-4f04-8e64-5e6826b4debc",
				"type": "text/javascript",
				"exec": [
					"/**",
					" * We use this script to get a new token if there's none or expired.",
					" * This automate the process of getting a new one manually.",
					" */ ",
					"",
					"const oAuthUrl = pm.environment.get('IS Protocol') + '://' + pm.environment.get('IS Instance') + '/' + pm.environment.get('IS API Token') + '/';",
					"const oAuthBody = 'grant_type=client_credentials&client_id=' + pm.environment.get('IS API Client') + '&client_secret=' + pm.environment.get('IS API Secret');",
					"",
					"const oAuthRequest = {",
					"    url: oAuthUrl,",
					"    method: 'POST',",
					"    timeout: 0,",
					"    header: {",
					"        \"Content-Type\": \"application/x-www-form-urlencoded\"",
					"    },",
					"    body: {",
					"        mode: \"raw\",",
					"        raw: oAuthBody",
					"    }",
					"};",
					"",
					"let getToken = true;",
					"",
					"if (!pm.environment.get('IS Access Token Expiry') || !pm.environment.get('IS Access Token')) {",
					"    // console.log('Token or expiry date are missing');",
					"} else if ( pm.environment.get('IS Access Token Expiry') <= (new Date()).getTime() ) {",
					"    // console.log('Token is expired');",
					"} else {",
					"    getToken = false;",
					"    // console.log('Token and expiry date are all good');",
					"}",
					"",
					"if ( getToken === true ) {",
					"    pm.sendRequest(oAuthRequest, function ( error, response ) {",
					"    // console.log( error ? error : response.json() );",
					"        if (error === null) {",
					"            // console.log('Saving the token and expiry date');",
					"            let responseJson = response.json();",
					"            pm.environment.set('IS Access Token', responseJson.access_token)",
					"    ",
					"            let expiryDate = new Date();",
					"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"            pm.environment.set('IS Access Token Expiry', expiryDate.getTime());",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "35809f76-c709-4cd4-a2f8-8cd55e7446b2",
				"type": "text/javascript",
				"exec": [
					"",
					"// If we got a 200, the request was executed succesfully",
					"pm.test(\"Status test\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "26f949fd-5aae-4e5b-addc-0469a7b029b4",
			"key": "recovered_userId",
			"value": "",
			"type": "string"
		}
	]
}