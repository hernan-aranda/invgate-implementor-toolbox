{
	"info": {
		"_postman_id": "9e72227c-5f34-4fe9-9874-1aeac6893fea",
		"name": "[SD] Bulk update user groups by email",
		"description": "This collection will update the user groups by it's email from a .csv\n\nAuthor: Hern√°n Aranda (a.k.a. Hernium)\n\n# Prerequisites\n\nCheck this article to prepare everything you need: [https://github.com/hernan-aranda/invgate-implementor-toolbox#how-to-use-this-resources](https://github.com/hernan-aranda/invgate-implementor-toolbox#how-to-use-this-resources)\n\n# Template\n\n| **Column** | **Description** |\n| --- | --- |\n| userEmail | Required. Email of the user that will be updated. |\n| groupId | Required. ID of the group where the user will be included. Only one group per row. Multiple rows for the same user are valid. |\n\nSource: [https://docs.google.com/spreadsheets/d/10cN2GcwdoPv8x8-5K6YKi1zdxbbaGsW_IWTTL9CuGnY/view#gid=1716900119](https://docs.google.com/spreadsheets/d/10cN2GcwdoPv8x8-5K6YKi1zdxbbaGsW_IWTTL9CuGnY/view#gid=1716900119)\n\n# Execution\n\n1. Set and select the enviroment, or replace the enviroment variables with your constants\n2. Create the .csv file. Make sure that your rows are ordered by depth\n3. Run the collection using the .csv file\n    \n\n# Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14766098"
	},
	"item": [
		{
			"name": "Get user id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json(); // Retrieve response\r",
							"pm.collectionVariables.set(\"recovered_userId\", responseJson.id); // We get the id of the user\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SD Protocol}}://{{SD Instance}}/api/{{SD API Version}}/user.by?email={{userEmail}}",
					"protocol": "{{SD Protocol}}",
					"host": [
						"{{SD Instance}}"
					],
					"path": [
						"api",
						"{{SD API Version}}",
						"user.by"
					],
					"query": [
						{
							"key": "email",
							"value": "{{userEmail}}",
							"description": "Variable. You get this value from de .csv"
						}
					]
				},
				"description": "Retrieves the id of a user by it's email.\n\nEndpoint doc.: [https://releases.invgate.com/service-desk/api/#userby-GET](https://desktop.postman.com/?desktopVersion=10.7.0&userId=14766098&teamId=0)"
			},
			"response": []
		},
		{
			"name": "Update user group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{SD Protocol}}://{{SD Instance}}/api/{{SD API Version}}/groups.users?users[]={{recovered_userId}}&id={{groupId}}",
					"protocol": "{{SD Protocol}}",
					"host": [
						"{{SD Instance}}"
					],
					"path": [
						"api",
						"{{SD API Version}}",
						"groups.users"
					],
					"query": [
						{
							"key": "users[]",
							"value": "{{recovered_userId}}",
							"description": "Variable. Atomatically retrieved from a previous request"
						},
						{
							"key": "id",
							"value": "{{groupId}}",
							"description": "Variable. You get this value from de .csv"
						}
					]
				},
				"description": "Make the user a member of this group.\n\nEndpoint doc.: [https://releases.invgate.com/service-desk/api/#groupsusers-POST](https://releases.invgate.com/service-desk/api/#groupsusers-POST)"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{SD API Password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{SD API User}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"// If we got a 200, the request was executed succesfully",
					"pm.test(\"Status test\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "recovered_userId",
			"value": "",
			"type": "string"
		}
	]
}